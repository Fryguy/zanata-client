package org.zanata.adapter.xliff;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import org.xml.sax.InputSource;
import org.zanata.rest.dto.extensions.comment.SimpleComment;
import org.zanata.rest.dto.resource.Resource;
import org.zanata.rest.dto.resource.TextFlow;

public class XliffWriter
{
   public static void main(String args[]) throws FileNotFoundException
   {
      XliffWriter a = new XliffWriter();
      String generateDir = "target/xliffGenerate/";

      XliffReader reader = new XliffReader();
      String docName = "StringResource_en_US.xml";
      String testDir = "src/test/resources/";

      File file = new File(testDir, "/" + docName);
      InputSource inputSource = new InputSource(new FileInputStream(file));
      Resource doc = reader.extractTemplate(inputSource, docName);
      doc.setName("Generated_" + doc.getName());
      
      a.write(new File(generateDir), doc);

   }

   private void mkdirs(File dir) throws IOException
   {
      if (!dir.exists())
      {
         if (!dir.mkdirs())
            throw new IOException("unable to create output directory: " + dir);
      }
   }

   // Write document header with XML, xliff, file and body tag
   private void writeHeader(XMLStreamWriter writer, Resource doc) throws XMLStreamException
   {
      // XML tag
      writer.writeStartDocument("utf-8", "1.0");
      writeNewLine(writer);
      writer.writeComment("XLIFF document generated by Zanata. Visit Zanata.org for more infomation.");
      writeNewLine(writer);

      // XLiff tag
      writer.writeStartElement("xliff");
      writer.writeNamespace("", "urn:oasis:names:tc:xliff:document:1.1");
      writer.writeNamespace("xyz", "urn:appInfo:Items");
      writer.writeNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
      writer.writeAttribute("xsi:schemaLocation", "urn:oasis:names:tc:xliff:document:1.1 http://www.oasis-open.org/committees/xliff/documents/xliff-core-1.1.xsd");
      writer.writeAttribute("version", "1.1");
      writeNewLine(writer);

      // file tag
      writer.writeStartElement("file");
      writer.writeAttribute("source-language", doc.getLang().getId());
      writer.writeAttribute("datatype", "plaintext");
      writeNewLine(writer);

      // body tag
      writer.writeStartElement("body");
      writeNewLine(writer);
   }

   private void writeTransUnit(XMLStreamWriter writer, Resource doc) throws XMLStreamException
   {
      for (TextFlow textFlow : doc.getTextFlows())
      {
         writer.writeStartElement("trans-unit");
         writer.writeAttribute("id", textFlow.getExtensions(true).findByType(SimpleComment.class).getValue());
         writeTransUnitChild(writer, textFlow);
         writer.writeEndElement();// end trans-unit tag
         writeNewLine(writer);
      }
   }
   
   private void writeTransUnitChild(XMLStreamWriter writer, TextFlow textFlow) throws XMLStreamException
   {
      writeNewLine(writer);
      writer.writeStartElement("source");
      writer.writeCharacters(textFlow.getContent());
      writer.writeEndElement();// end source tag
      writeNewLine(writer);
   }

   private void writeNewLine(XMLStreamWriter writer) throws XMLStreamException
   {
      writer.writeCharacters("\n");
   }

   public void write(File baseDir, Resource doc)
   {
      XMLOutputFactory output = XMLOutputFactory.newInstance();
      XMLStreamWriter writer;
      try
      {
         mkdirs(baseDir);
         writer = output.createXMLStreamWriter(new FileWriter(baseDir + "/" + doc.getName()));

         writeHeader(writer, doc);
         writeTransUnit(writer, doc);

         writer.writeEndElement(); // end body tag
         writeNewLine(writer);
         writer.writeEndElement(); // end file tag
         writeNewLine(writer);
         writer.writeEndDocument(); // end Xliff tag
         writer.flush();
         writer.close();
      }
      catch (XMLStreamException e)
      {
         throw new RuntimeException("Error generating Xliff file format   ", e);
      }
      catch (IOException e)
      {
         throw new RuntimeException("Error writing Xliff file  ", e);
      }
   }

}
